:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:
#+title: Doom Emacs configuration
#+author: Giuseppe Ragusa
#+email: giuseppe.ragusa@gmail.com

[[file:splash/doom-emacs-bw-light.svg]]

This is my Doom Emacs configuration. From this org file, all the necessary Doom Emacs config files are generated.

This file is written in [[https://leanpub.com/lit-config][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:init.el][init.el]], [[file:packages.el][packages.el]] and [[file:config.el][config.el]] for the generated files. You can see this in a nicer format on my blog post [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][My Doom Emacs configuration, with commentary]].

* Table of Contents :TOC_3:noexport:
- [[#references][References]]
- [[#doom-config-file-overview][Doom config file overview]]
  - [[#config-file-headers][Config file headers]]
- [[#doom-modules][Doom modules]]
- [[#emacs-28-specific-stuff][Emacs 28 Specific Stuff]]
  - [[#unpin][Unpin]]
- [[#general-configuration][General configuration]]
  - [[#user-information][User Information]]
  - [[#defaults][Defaults]]
  - [[#mac-keybindings][MAC Keybindings]]
  - [[#make-backup-and-autosave][Make Backup and autosave]]
  - [[#exit-without-asking][Exit without asking]]
  - [[#global-keybindings][Global keybindings]]
  - [[#visual-session-and-window-settings][Visual, session and window settings]]
    - [[#fonts][Fonts]]
    - [[#mixed-pitch][Mixed Pitch]]
    - [[#set-the-theme][Set the theme]]
    - [[#set-the-emacs-theme-to-the-terminal][Set the emacs theme to the terminal]]
    - [[#modeline][Modeline]]
    - [[#treemacs][Treemacs]]
    - [[#windows-splitting][Windows splitting]]
- [[#modules-configuration][Modules configuration]]
  - [[#org-mode][Org-mode]]
    - [[#additional-packages][Additional packages]]
    - [[#org-config][org-config]]
    - [[#end-after-config][End after! config]]
  - [[#latex][LaTeX]]
  - [[#vterm][vterm]]
  - [[#julia-mode][Julia Mode]]

* References

Configuring Emacs is a hobby. I think the majority of people using Emacs spends
more time configuring it than using its features. I am not different. I have
been writing many Emacs config files over the years. My conclusion is that less
is more. While overconfiguring Emacs makes it look coll, at the end of the day a
clean fast editor is more functional.

This config is a collection of other people's (who know what they are doing with lisp) configuration. You will find snippets from all of these (and possibly others) throughout my config.

- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
- [[https://github.com/daedreth/UncleDavesEmacs#user-content-ido-and-why-i-started-using-helm][Uncle Dave's Emacs config]]
- [[https://github.com/PythonNut/emacs-config][PythonNut's Emacs config]]
- [[https://www.masteringemacs.org/][Mastering Emacs]]
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's Emacs config]]

_Note:_ a lot of manual configuration has been rendered moot by =Emacs Doom=, which aggregates a well-maintained and organized collection of common configuration settings for performance optimization, package management, commonly used packages (e.g. Org) and much more.

* Doom config file overview

Doom Emacs uses three config files:

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

There are other files that can be loaded, but theses are the main ones. The load order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being started.

All the config files are generated from this Org file, to try and make its meaning as clear as possible. All =package!= declarations are written to =packages.el=, all other LISP code is written to =config.el=.

** Config file headers

We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by =doom install=, and contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>

* Doom modules

This code is written to the =init.el= to select which modules to load. Written here as-is for now, as it is quite well structured and clear.

#+begin_src emacs-lisp :tangle init.el
  (doom! :input
         ;;chinese
         ;;japanese
         ;;layout            ; auie,ctsrnm is the superior home row

         :completion
         (company            ; the ultimate code completion backend
          +childframe)
         ;;helm              ; the *other* search engine for love and life
         ;;ido               ; the other *other* search engine...
         (ivy                ; a search engine for love and life
          +prescient
          +fuzzy
          +icons)
         :ui
         ;;deft              ; notational velocity for Emacs
         doom                ; what makes DOOM look the way it does
         doom-dashboard      ; a nifty splash screen for Emacs
         ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
         (emoji +unicode)    ;
         ;;fill-column       ; a `fill-column' indicator
         hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
         ;;hydra
         ;;indent-guides     ; highlighted indent columns
         (ligatures          ; ligatures and symbols to make your code pretty again
          +iosevka
          +extra)
         ;;minimap           ; show a map of the code on the side
         modeline            ; snazzy, Atom-inspired modeline, plus API
         ;;nav-flash         ; blink cursor line after big motions
         ;;neotree           ; a project drawer, like NERDTree for vim
         ophints             ; highlight the region an operation acts on
         (popup +defaults)   ; tame sudden yet inevitable temporary windows
         ;;tabs              ; a tab bar for Emacs
         treemacs          ; a project drawer, like neotree but cooler
         unicode           ; extended unicode support for various languages
         ;;vc-gutter         ; vcs diff in the fringe
         vi-tilde-fringe     ; fringe tildes to mark beyond EOB
         ;;window-select     ; visually switch windows
         workspaces          ; tab emulation, persistence & separate workspaces
         ;;zen               ; distraction-free coding or writing

         :editor
         (evil +everywhere)  ; come to the dark side, we have cookies
         file-templates      ; auto-snippets for empty files
         fold                ; (nigh) universal code folding
         ;;(format +onsave  ; automated prettiness
         ;;god              ; run Emacs commands without modifier keys
         ;;lispy            ; vim for lisp, for people who don't like vim
         multiple-cursors  ; editing in many places at once
         ;;objed           ; text object editing for the innocent
         ;;parinfer        ; turn lisp into python, sort of
         ;;rotate-text     ; cycle region at point between text candidates
         snippets          ; my elves. They type so I don't have to
         word-wrap         ; soft wrapping with language-aware indent

         :emacs
         (dired            ; making dired pretty [functional]
          +icons
          +ranger)
         electric          ; smarter, keyword-based electric-indent
         ;;ibuffer         ; interactive buffer management
         undo              ; persistent,smarter undo for your inevitable mistakes
         ;;vc              ; version-control and Emacs, sitting in a tree

         :term
         ;;eshell          ; the elisp shell that works everywhere
         ;;shell           ; simple shell REPL for Emacs
         ;;term            ; basic terminal emulator for Emacs
         vterm             ; the best terminal emulation in Emacs

         :checkers
         syntax            ; tasing you for every semicolon you forget
         (spell
          +flyspell
          +everywhere)     ; tasing you for misspelling mispelling
         ;;grammar         ; tasing grammar mistake every you make

         :tools
         ;;ansible
         ;;debugger          ; FIXME stepping through code, to help you add bugs
         ;;direnv
         ;;docker
         ;;editorconfig      ; let someone else argue about tabs vs spaces

         ;;ein               ; tame Jupyter notebooks with emacs
         (eval +overlay)     ; run code, run (also, repls)
         ;;gist              ; interacting with github gists
         lookup              ; navigate your code and its documentation
         ;;lsp
         magit               ; a git porcelain for Emacs
         ;;make              ; run make tasks from Emacs
         ;;pass              ; password manager for nerds
         pdf                 ; pdf enhancements
         ;;prodigy           ; FIXME managing external services & code builders
         ;;rgb               ; creating color strings
         ;;taskrunner        ; taskrunner for all your projects
         ;;terraform         ; infrastructure as code
         tmux                ; an API for interacting with tmux
         ;;upload            ; map local to remote projects via ssh/ftp

         :os
         (:if IS-MAC macos)  ; improve compatibility with macOS
         ;;tty               ; improve the terminal Emacs experience

         :lang
         ;;agda              ; types of types of types of types...
         ;;cc                ; C/C++/Obj-C madness
         ;;clojure           ; java with a lisp
         ;;common-lisp       ; if you've seen one lisp, you've seen them all
         ;;coq               ; proofs-as-programs
         ;;crystal            ; ruby at the speed of c
         ;;csharp            ; unity, .NET, and mono shenanigans
         ;;data              ; config/data formats
         ;;(dart +flutter)   ; paint ui and not much else
         ;;elixir            ; erlang done right
         ;;elm               ; care for a cup of TEA?
         emacs-lisp          ; drown in parentheses
         ;;erlang            ; an elegant language for a more civilized age
         ess                ; emacs speaks statistics
         ;; +lsp)
         ;;faust             ; dsp, but you get to keep your soul
         ;;fsharp            ; ML stands for Microsoft's Language
         ;;fstar             ; (dependent) types and (monadic) effects and Z3
         ;;gdscript          ; the language you waited for
         go                  ; the hipster dialect
         ;;(haskell +dante)  ; a language that's lazier than I am
         ;;hy                ; readability of scheme w/ speed of python
         ;;idris             ; a language you can depend on
         json                ; At least it ain't XML
         ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
         javascript          ; all(hope(abandon(ye(who(enter(here))))))
         julia              ; a better, faster MATLAB

         ;;kotlin            ; a better, slicker Java(Script)
         (latex
          +cdlatex
          +latexmk
          +fold)
         ;;lean
         ;;factor
         ;;ledger            ; an accounting system in Emacs
         ;;lua               ; one-based indices? one-based indices
         markdown            ; writing docs for people to ignore
         ;;nim               ; python + lisp at the speed of c
         ;;nix               ; I hereby declare "nix geht mehr!"
         ;;ocaml             ; an objective camel
         (org                ; organize your plain life in plain text
          +brain
          +journal
          +jupyter
          +noter
          +pandoc
          +present
          +pretty
          )
         ;;php               ; perl's insecure younger brother
         ;;plantuml          ; diagrams for confusing people more
         ;;purescript        ; javascript, but functional
         (python             ; beautiful is better than ugly
          +lsp
          +pyright
          +pyenv
          +poetry
          +cython)
         ;;qt                ; the 'cutest' gui framework ever
         ;;racket            ; a DSL for DSLs
         ;;raku              ; the artist formerly known as perl6
         ;;rest              ; Emacs as a REST client
         ;;rst               ; ReST in peace
         ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
         ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
         ;;scala             ; java, but good
         ;;scheme            ; a fully conniving family of lisps
         sh                  ; she sells {ba,z,fi}sh shells on the C xor
         ;;sml
         ;;solidity          ; do you need a blockchain? No.
         ;;swift             ; who asked for emoji variables?
         ;;terra             ; Earth and Moon in alignment for performance.
         ;;web               ; the tubes
         ;;yaml              ; JSON, but readable

         :email
         ;;(mu4e +gmail)
         ;;notmuch
         ;;(wanderlust +gmail)

         :app
         ;;calendar
         ;;everywhere        ; *leave* Emacs!? You must be joking
         ;;irc               ; how neckbeards socialize
         ;;(rss +org)        ; emacs as an RSS reader
         ;;twitter           ; twitter client https://twitter.com/vnought

         :config
         ;;literate
         (default +bindings +smartparens))
#+end_src

* Emacs 28 Specific Stuff
I use Emacs 28.0.5 compiled with =--native-comp= flag. Doom suppports it, but some packages are pinned to versions that do not work well with it.
** Unpin
I need to unpin several packages to get Emacs 28.0.5 working
#+begin_src emacs-lisp :tangle packages.el
(unpin! dap-mode lsp-mode treemacs spinner)
#+end_src
* General configuration
** User Information

My user information.
#+begin_src emacs-lisp
(setq user-full-name "Giuseppe Ragusa"
      user-mail-address "giuseppe.ragusa@gmail.com")
#+end_src

** Defaults
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4                                                         ; Set width for tabs
 uniquify-buffer-name-style 'forward      ; Uniquify buffer names
 window-combination-resize t                    ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                                           ; Stretch cursor to the glyph width

(setq undo-limit 80000000                          ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                             ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                                    ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t      ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "…")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                             ; Replace selection when inserting text
(display-time-mode 1)                                   ; Enable time in the mode-line
(global-subword-mode 1)                           ; Iterate through CamelCase words
(setq line-spacing 0.3)
#+end_src

** MAC Keybindings

I am very much used to have the usual MAC keybindings. They are bounded in Carbon Emacs. I am using Emacs@28, so I need to manually add them. This can be done quite easily by the [[http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/zenitani/CarbonEmacs/src/lisp/mac-key-mode.el?root=macwiki&view=markup][mac-key-mode]].
#+begin_src emacs-lisp :tangle packages.el
(cond (IS-MAC
       (package! mac-key-mode)
))
#+end_src

** Make Backup and autosave

For some reason Doom disables auto-save and backup files by default. Let's reenable them.

#+begin_src emacs-lisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

** Exit without asking

#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

** Global keybindings

I have used Emacs for a long time on different platforms and I am used to several keybinding that I should probably forget, but muscle memory gets me everytime.

#+begin_src emacs-lisp

(map! :leader
      :desc "Move to window left"  "<left>"  #'evil-window-left
      :desc "Move to window right" "<right>" #'evil-window-right
      :desc "Move to window up"    "<up>"    #'evil-window-up
      :desc "Move to window down"  "<down>"  #'evil-window-down
)
(global-set-key [f1] 'replace-string)
(global-set-key [f2] 'split-window-horizontally)
(global-set-key [f3] 'split-window-vertically)
(global-set-key [f4] 'delete-window)
(global-set-key [home] 'beginning-of-line)
(global-set-key [end] 'end-of-line)
#+end_src

** Visual, session and window settings

*** Fonts

I tend to change very often the fonts that I use. The only fix-point is =JuliaMono=. These fonts are specifically designed for programming in Julia and using its extensive ability of using Unicode characters.

Set base and variable-pitch fonts. I currently like [[https://github.com/be5invis/Iosevka]Iosevka SS4]] and [[https://www.huertatipografica.com/en/fonts/alegreya-ht-pro][Alegreya]]. I also use a laptop (OSX) where a prefer smaller font sizes and a desktop (Linux) so a set font size conditionally.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Term SS04" :size 22)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 24)
      doom-unicode-font (font-spec :family "Iosevka Term SS04")
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
(setq doom-unicode-font doom-font)
(cond (IS-MAC
       ))

 (cond (IS-LINUX
        ))
#+end_src

*** Mixed Pitch

Allow mixed fonts in a buffer. This is particularly useful for Org mode, so I can mix source and prose blocks in the same document.

#+begin_src emacs-lisp :tangle no
(add-hook! org-mode-hook #'mixed-pitch-mode)
(setq mixed-pitch-variable-pitch-cursor nil)
#+end_src

*** Set the theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)
#+end_src
*** Set the emacs theme to the terminal

What's the point in an Emacs theme if the rest of Linux looks different?

#+begin_src emacs-lisp :tangle packages.el
(package! theme-magic)
#+end_src

Run =theme-magic-from-emacs= when the theme is changed

#+begin_src emacs-lisp
(run-with-idle-timer 0.1 nil (lambda () (add-hook 'doom-load-theme-hook 'theme-magic-from-emacs)))
#+end_src

*** Modeline
Modeline uses red for the file that has not been saved. Make this orange.

#+begin_src
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

*** Treemacs
When using =treemacs= exclude several files that are never to be opened in emacs
#+begin_src emacs-lisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

(setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))
#+end_src

*** Windows splitting
The following code allows me to choose which buffer I want to see when I split a window. It first does a split to the right, and then opens Ivy and and shows me a preview.
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)
#+end_src
* Modules configuration
** Org-mode
*** Additional packages
#+begin_src emacs-lisp :tangle packages.el
(package! org-fragtog :pin "0151cabc7aa9f244f82e682b87713b344d780c23")
(package! org-superstar)
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
;;(package! org-ref )
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
#+end_src

*** org-config
**** Start after config
#+begin_src emacs-lisp
(after! org
#+end_src

**** Directories
#+begin_src emacs-lisp
  (setq org-directory "/home/gragusa/Dropbox/Org"          ; Kitchen sink!
        ;;org-roam-directory "~/Dropbox/Org/roam"
        org-log-done 'time                     ; having the time a item is done sounds convenient
        org-list-allow-alphabetical t          ; have a. A. a) A) list bullets
        org-export-in-background t             ; run export processes in external emacs process
        org-catch-invisible-edits 'smart       ; try not to accidently do weird stuff in invisible regions
        org-export-with-sub-superscripts '{}        ; don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}
        org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")

#+end_src

**** Disable visual-line-mode
=visual-line-mode= may create issues of various sorts with =org=. Fill mode seems like a better idea. Does it?

#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)
#+end_src

**** Flyspell

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src

**** View exported files

#+begin_src emacs-lisp
 (map! :map org-mode-map
        :localleader
        :desc "View exported file" "v" #'org-view-output-file)

  (defun org-view-output-file (&optional org-file-path)
    "Visit buffer open on the first output file (if any) found, using `org-view-output-file-extensions'"
    (interactive)
    (let* ((org-file-path (or org-file-path (buffer-file-name) ""))
           (dir (file-name-directory org-file-path))
           (basename (file-name-base org-file-path))
           (output-file nil))
      (dolist (ext org-view-output-file-extensions)
        (unless output-file
          (when (file-exists-p
                 (concat dir basename "." ext))
            (setq output-file (concat dir basename "." ext)))))
      (if output-file
          (if (member (file-name-extension output-file) org-view-external-file-extensions)
              (browse-url-xdg-open output-file)
            (pop-to-buffer (or (find-buffer-visiting output-file)
                               (find-file-noselect output-file))))
        (message "No exported file found"))))

  (defvar org-view-output-file-extensions '("pdf" "md" "rst" "txt" "tex" "html")
    "Search for output files with these extensions, in order, viewing the first that matches")
  (defvar org-view-external-file-extensions '("html")
    "File formats that should be opened externally.")
#+end_src

**** Org-pretty
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook
           #'+org-pretty-mode)
#+end_src
**** Nicer return

#+begin_src emacs-lisp
  (defun unpackaged/org-return-dwim (&optional default)
    "A helpful replacement for `org-return-indent'.  With prefix, call `org-return-indent'.

  On headings, move point to position after entry content.  In
  lists, insert a new item or end the list, with checkbox if
  appropriate.  In tables, insert a new row or end the table."
    ;; Inspired by John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
    (interactive "P")
    (if default
        (org-return t)
      (cond
       ;; Act depending on context around point.

       ;; NOTE: I prefer RET to not follow links, but by uncommenting this block, links will be
       ;; followed.

       ;; ((eq 'link (car (org-element-context)))
       ;;  ;; Link: Open it.
       ;;  (org-open-at-point-global))

       ((org-at-heading-p)
        ;; Heading: Move to position after entry content.
        ;; NOTE: This is probably the most interesting feature of this function.
        (let ((heading-start (org-entry-beginning-position)))
          (goto-char (org-entry-end-position))
          (cond ((and (org-at-heading-p)
                      (= heading-start (org-entry-beginning-position)))
                 ;; Entry ends on its heading; add newline after
                 (end-of-line)
                 (insert "\n\n"))
                (t
                 ;; Entry ends after its heading; back up
                 (forward-line -1)
                 (end-of-line)
                 (when (org-at-heading-p)
                   ;; At the same heading
                   (forward-line)
                   (insert "\n")
                   (forward-line -1))
                 ;; FIXME: looking-back is supposed to be called with more arguments.
                 (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                   (insert "\n"))
                 (forward-line -1)))))

       ((org-at-item-checkbox-p)
        ;; Checkbox: Insert new item with checkbox.
        (org-insert-todo-heading nil))

       ((org-in-item-p)
        ;; Plain list.  Yes, this gets a little complicated...
        (let ((context (org-element-context)))
          (if (or (eq 'plain-list (car context))  ; First item in list
                  (and (eq 'item (car context))
                       (not (eq (org-element-property :contents-begin context)
                                (org-element-property :contents-end context))))
                  (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
              ;; Non-empty item: Add new item.
              (org-insert-item)
            ;; Empty item: Close the list.
            ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
            (delete-region (line-beginning-position) (line-end-position))
            (insert "\n"))))

       ((when (fboundp 'org-inlinetask-in-task-p)
          (org-inlinetask-in-task-p))
        ;; Inline task: Don't insert a new heading.
        (org-return t))

       ((org-at-table-p)
        (cond ((save-excursion
                 (beginning-of-line)
                 ;; See `org-table-next-field'.
                 (cl-loop with end = (line-end-position)
                          for cell = (org-element-table-cell-parser)
                          always (equal (org-element-property :contents-begin cell)
                                        (org-element-property :contents-end cell))
                          while (re-search-forward "|" end t)))
               ;; Empty row: end the table.
               (delete-region (line-beginning-position) (line-end-position))
               (org-return t))
              (t
               ;; Non-empty row: call `org-return-indent'.
               (org-return t))))
       (t
        ;; All other cases: call `org-return-indent'.
        (org-return t)))))

  (map!
   :after evil-org
   :map evil-org-mode-map
   :i [return] #'unpackaged/org-return-dwim)
#+end_src

**** Org-appear
Org mode provides a way to toggle visibility of emphasis markers, links, subscripts, and superscripts by customising variables such as org-hide-emphasis-markers. However, it is currently not possible to do this interactively and on an element-by-element basis. Emphasis and verbatim marker toggling requires reloading the Org buffer; links and sub/superscripts are always toggled in the entire buffer. This package, inspired by org-fragtog, enables automatic visibility toggling depending on cursor position. Hidden element parts appear when the cursor enters an element and disappear when it leaves.

#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src

**** Org-superstar
#+begin_src emacs-lisp
  (after! org-superstar
    (setq org-superstar-headline-bullets-list '("*" "o" "∴" "∵" "o" "." "⬠" "▶")
          ;; org-superstar-headline-bullets-list '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ")
          org-superstar-prettify-item-bullets t ))
#+end_src

**** Ligatures

#+begin_src emacs-lisp
  (appendq! +ligatures-extra-symbols
            `(:checkbox      "☐"
              :pending       "◼"
              :checkedbox    "☑"
              :list_property "∷"
              :em_dash       "—"
              :ellipses      "…"
              :arrow_right   "→"
              :arrow_left    "←"
              :title         "𝙏"
              :subtitle      "𝙩"
              :author        "𝘼"
              :date          "𝘿"
              :property      "☸"
              :options       "⌥"
              :latex_class   "🄲"
              :latex_header  "⇥"
              :beamer_header "↠"
              :attr_latex    "🄛"
              :attr_html     "🄗"
              :begin_quote   "❝"
              :end_quote     "❞"
              :caption       "☰"
              :header        "›"
              :results       "🠶"
              :begin_export  "⏩"
              :end_export    "⏪"
              :properties    "⚙"
              :end           "∎"
              :priority_a   ,(propertize "⚑" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "⬆" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "■" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "⬇" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "❓" 'face 'all-the-icons-blue)))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :email         "#+email:"
    :property      "#+property:"
    :options       "#+options:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :attr_latex    "#+attr_latex:"
    :attr_html     "#+attr_latex:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :caption       "#+caption:"
    :header        "#+header:"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :results       "#+RESULTS:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]")
  (plist-put +ligatures-extra-symbols :name "⁍")
  (setq org-highlight-latex-and-related '(native script entities))
  (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))
#+end_src

**** Org-fragtog

#+begin_src emacs-lisp
 (use-package! org-fragtog
    :hook (org-mode . org-fragtog-mode))

  (setq org-format-latex-header "\\documentclass{article}
  \\usepackage[usenames]{xcolor}
  \\usepackage[T1]{fontenc}
  \\usepackage{booktabs}
  \\pagestyle{empty}             % do not remove
  % The settings below are copied from fullpage.sty
  \\setlength{\\textwidth}{\\paperwidth}
  \\addtolength{\\textwidth}{-3cm}
  \\setlength{\\oddsidemargin}{1.5cm}
  \\addtolength{\\oddsidemargin}{-2.54cm}
  \\setlength{\\evensidemargin}{\\oddsidemargin}
  \\setlength{\\textheight}{\\paperheight}
  \\addtolength{\\textheight}{-\\headheight}
  \\addtolength{\\textheight}{-\\headsep}
  \\addtolength{\\textheight}{-\\footskip}
  \\addtolength{\\textheight}{-3cm}
  \\setlength{\\topmargin}{1.5cm}
  \\addtolength{\\topmargin}{-2.54cm}
  ")
  (setq org-format-latex-options
        (plist-put org-format-latex-options :background "Transparent"))

#+end_src

**** Org-latex

#+begin_src emacs-lisp
#+end_src

*** End after! config
#+begin_src emacs-lisp
)
#+end_src

** LaTeX

** vterm
#+begin_src emacs-lisp
(map! :after vterm
      :map vterm-mode-map
      :i [tab] #'vterm--self-insert
      :i "TAB" #'vterm--self-insert
)
#+end_src

** Julia Mode
#+begin_src emacs-lisp :tangle packages.el
(package! julia-repl
  :recipe (:host github
           :repo "tpapp/julia-repl"
           :branch "master")
)
#+end_src

For some reason, the interaction of company and latexsub make the poit after
completion go at the beginning of the insertion. This function fix it.

#+begin_src emacs-lisp
  (defun my-company-after-completion-hook (&rest _ignored)
    ;; this would be called with the completion candidate, so you could
    ;; modify it to insert spaces based on the candidate
    (forward-word))
#+end_src

#+begin_src emacs-lisp

(set-company-backend! 'julia-mode 'company-capf 'company-yasnippet 'company-math-symbols-unicode)

(defun setup-unicode ()
   "Unicode input for the buffer."
  (interactive)
  (company-mode)                        ; using company-mode
  (setq-local company-backends '(company-math-symbols-unicode company-yasnippet company-capf))
  (setq-local company-minimum-prefix-length 1)
  (setq-local company-idle-delay 0)
  (setq-local company-completion-finished-hook #'my-company-after-completion-hook)
  )

(after! julia-repl
  (julia-repl-set-terminal-backend 'vterm)
  )

(after! lsp-julia
  (setq lsp-enable-folding t)
  )

;; Make sure that the file is present
(setq julia-repl-switches "--sysimage /Users/gragusa/.julia/.ds/ds")
(setq inferior-julia-args "--sysimage /Users/gragusa/.julia/.ds/ds")
#+end_src
